extends layout 
block content
  ul
    li
        a(href='..') Home
      |   
    |   
    li.dropdown
      a.dropbtn(href='javascript:void(0)') Update Rider Map
      |     
      .dropdown-content   
        div(name='statusButton', id = "updateStatus") Update Trail Status
        div(name='difficultyButton', id="updateDifficulty") Update Trail Difficulty      
        div(name='featureadd', id='featureadd') Create New Feature 
        div(name='updateEmergency', id='emergencyadd') Create Emergency Access

  #statusDiv
    a.close(id="closeButtonTrail")
    form(action='/updateStatus' method='POST')     
        label(for='trail') Select Trail     
        select#trail(name='trail' required)
          for trail in trails
            option=trail.properties.f2            
        label(for='status') Open/Closed
        select#status(name='status') 
          option(value='open') Open
          option(value='closed') Closed
        label(for='message') Status Message    
        input#statusMessage(type='text', name='message', placeholder='Trail construction...')   
        input(type='submit', name='submit', value='Submit')
  #difficultyDiv 
    a.close(id="closeButtonDifficulty")
    form(action='/updateDifficulty' method='POST')
      label(for='trail') Select Trail
      select#trail(name='trail' required)
        for trail in trails 
          option=trail.properties.f2
      label(for='difficulty') Choose Difficulty 
      select#difficulty(name='difficulty')
        option(value='beginner') Beginner
        option(value='intermediate') Intermediate 
        option(value='advanced') Advanced 
        option(value='expert') Expert
      input(type='submit', name='submit', value='Submit')
  #newFeature
    a.close(id="closeButtonFeat")
    form(action='/createFeature' method='POST')
        label(for='featureName') Feature Name
        input#featname(type='text', name='featname', placeholder='Big Jump....')
        label(for='featuretype') Feature Type
        select#featureType(name='ftype' required)
          option(value='Jump') Jump      
          option(value='Wood Ramp') Wood
          option(value='Bike Repair') Bike Repair Station
          option(value='Bike Wash') Bike Wash Station
        label(for='featureLocation') Place Feature Point
        input#featureLocationLat(type='text', name='featlocationLat', placeholder='Move cursor on map to populate')
        input#featureLocationLng(type='text', name='featlocationLng', placeholder='Move cursor on map to populate')                      
        input(type='submit', value='Submit')
  #newEmergency 
    a.close(id="closeButtonEmerg")
    form(action='/createEmergency' method='POST')
      label(for='emergencytype') Emergency Type
      select#emergencyType(name='emergtype' required)
        option(value='First Aid Station') First Aid Station
        option(value='Crash Pickup Zone') Crash Pickup Zone
      label(for='emergencylocation') Place Emergency Point
      input#emergLocationLat(type='text', name='emerglocationLat', placeholder='Move cursor on map to populate')
      input#emergLocationLng(type='text', name='emerglocationLng', placeholder='Move cursor on map to populate')
      input(type='submit', value='Submit')

  #map
  script.
    window.onload = function() {
      if(!window.location.hash) {
        window.location = window.location + '#loaded';
        window.location.reload();
      }
    };
    var updateStatus = document.querySelector('#updateStatus');
    sl = document.querySelector('#statusDiv')
    updateStatus.addEventListener('click',()=>{
      if (sl.style.display == 'none') {
        sl.style.display = 'block';
      } else {
        sl.style.display ='none';
      }
    });

    var updateDifficulty = document.querySelector('#updateDifficulty');
    ud = document.querySelector('#difficultyDiv')
    updateDifficulty.addEventListener('click', ()=>{
      if (ud.style.display == 'none') {
        ud.style.display = 'block';
      } else {
        ud.style.display = 'none';
      }
    });


    var featureMarker
    var updateFeature = document.querySelector('#featureadd');
    var featLocLat = document.querySelector('#featureLocationLat');
    var featLocLng = document.querySelector('#featureLocationLng');

    fa = document.querySelector('#newFeature')
    updateFeature.addEventListener('click', ()=>{
      if (fa.style.display == 'none') {
        fa.style.display = 'block';
        featureMarker = new L.marker([38.41514, -79.98964], {
          draggable: true,
          autoPan: true
        });
        map.addLayer(featureMarker);
        featureMarker.bindTooltip("Drag to place your feature point");
        featureMarker.on('mouseover', function (e){
          this.openTooltip()
        })
        console.log(featureMarker.getLatLng())
        console.log(featLocLat)
        featureMarker.on('dragend', function (e) {
          featLocLat.value = featureMarker.getLatLng().lat;
          featLocLng.value = featureMarker.getLatLng().lng;
        })
      } else {
        fa.style.display = 'none';
      }
    });

    var emergMarker
    var updateEmergency = document.querySelector('#emergencyadd');
    var emergLocLat = document.querySelector('#emergLocationLat');
    var emergLocLng = document.querySelector('#emergLocationLng')

    ea = document.querySelector('#newEmergency')
    updateEmergency.addEventListener('click', ()=> {
      if (ea.style.display == 'none') {
        ea.style.display = 'block';
        emergMarker = new L.marker([38.41514, -79.98964], {
          draggable: true,
          autoPan: true
        });
        map.addLayer(emergMarker);
        emergMarker.bindTooltip("Drag to place the emergency point");
        emergMarker.on('mouseover', function (e){
          this.openTooltip()
        })
        console.log(emergMarker.getLatLng())
        console.log(emergLocLat)
        emergMarker.on('dragend', function (e) {
          emergLocLat.value = emergMarker.getLatLng().lat;
          emergLocLng.value = emergMarker.getLatLng().lng;
        })
      } else {
        ea.style.display = 'none';
      }
    });

    var trailClose = document.querySelector('#closeButtonTrail');
    trailClose.addEventListener('click', ()=>{
      sl.style.display = 'none'
      fa.style.display = 'none'
      ud.style.display = 'none'
      ea.style.display = 'none'
    });
    var featClose = document.querySelector('#closeButtonFeat');
    featClose.addEventListener('click', ()=>{
      map.removeLayer(featureMarker)
      fa.style.display = 'none'
      sl.style.display = 'none'
      ud.style.display = 'none'
      ea.style.display = 'none'
    });
    var diffClose = document.querySelector('#closeButtonDifficulty');
    diffClose.addEventListener('click', ()=>{
      ud.style.display = 'none'
      sl.style.display = 'none'
      fa.style.display = 'none'
      ea.style.display = 'none'
    });
    var emergClose = document.querySelector('#closeButtonEmerg');
    emergClose.addEventListener('click', ()=>{
      map.removeLayer(emergMarker)
      ea.style.display = 'none'
      fa.style.display = 'none'
      sl.style.display = 'none'
      ud.style.display = 'none'
    })
      var myData = !{JSON.stringify(jsonData)};
      var featData = !{JSON.stringify(featData)};
      var emergData = !{JSON.stringify(emergData)};
    // Create variable to hold map element, give initial settings to map
      var map = L.map('map',{ center: [38.41514, -79.98964], zoom: 15});
      // Add OpenStreetMap tile layer to map element
      L.tileLayer('https://{s}.basemaps.cartocdn.com/rastertiles/voyager_labels_under/{z}/{x}/{y}{r}.png', {
        attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors &copy; <a href="https://carto.com/attributions">CARTO</a>'
      }).addTo(map);

      //- console.log(myData)
      var lift = {
      "type": "FeatureCollection",
      "features": [
        {
          "type": "Feature",
          "properties": {
            "name": "Ballhooter Bike Lift"
          },
          "geometry": {
            "type": "LineString",
            "coordinates": [
              [
                -79.98392343521118,
                38.41474476109837
              ],
              [
                -79.99456644058228,
                38.411230799050685
              ]
            ]
          }
        }
      ]
    }

      L.geoJson(lift,{
        onEachFeature: function (feature, layer) {
          layer.bindPopup(feature.properties.name)
          layer.on('mouseover', function (e) {
            this.openPopup()
          });
          layer.on('mouseout', function (e) {
            this.closePopup();
          });
          layer.on('click', function (e) {
            this.fitBounds(this.getBounds())
          });
        },
        style: function(feature) {
          switch (feature.properties.name) {
            case 'Ballhooter Bike Lift': return {color: "#bbbdbf", weight: 7};
          }
        }
      }).bringToBack().addTo(map);

      var jumpIcon = L.icon ({
        iconUrl: 'https://image.flaticon.com/icons/png/512/2618/2618845.png',
        iconSize: [45,45]
      });
      var woodIcon = L.icon ({
        iconUrl: 'https://image.flaticon.com/icons/png/512/2948/2948264.png',
        iconSize: [25,25]
      });
      var repairIcon = L.icon ({
        iconUrl: 'https://image.flaticon.com/icons/png/512/5265/5265429.png',
        iconSize: [35,35]
      });
      var washIcon = L.icon ({
        iconUrl: 'https://image.flaticon.com/icons/png/512/2709/2709415.png',
        iconSize: [35,35]
      });

      L.geoJson(featData,{
          onEachFeature: function (feature, layer) {
          layer.bindPopup(feature.properties.f1)
          layer.on('mouseover', function (e) {
            this.openPopup()
          });
          layer.on('mouseout', function (e) {
            this.closePopup();
          });
          layer.on('click', function (e) {
            var latLngs = [this.getLatLng()];
            var markerBounds = L.latLngBounds(latLngs);
            map.fitBounds(markerBounds);
          });
        },
        pointToLayer: function (feature, latlng) {
          console.log(feature.geometry.coordinates)
          switch (feature.properties.f2) {
            case 'Jump': return L.marker(latlng, {icon:jumpIcon});
            case 'Wood Ramp': return L.marker(latlng, {icon:woodIcon});
            case 'Bike Repair': return L.marker(latlng, {icon:repairIcon});
            case 'Bike Wash': return L.marker(latlng, {icon:washIcon});
          }
        }
      }).bringToFront().addTo(map);

      var aidIcon = L.icon ({
        iconUrl: 'https://image.flaticon.com/icons/png/512/5335/5335736.png',
        iconSize: [35,35]
      });
      var crashIcon = L.icon ({
        iconUrl: 'https://image.flaticon.com/icons/png/512/2996/2996353.png',
        iconSize: [35,35]
      });

      L.geoJson(emergData,{
          onEachFeature: function (feature, layer) {
          layer.bindPopup(feature.properties.f1)
          layer.on('mouseover', function (e) {
            this.openPopup()
          });
          layer.on('mouseout', function (e) {
            this.closePopup();
          });
          layer.on('click', function (e) {
            var latLngs = [this.getLatLng()];
            var markerBounds = L.latLngBounds(latLngs);
            map.fitBounds(markerBounds);
          });
        },
        pointToLayer: function(feature, latlng) {
          console.log(feature.geometry.coordinates)
          switch (feature.properties.f1) {
            case 'First Aid Station': return L.marker(latlng, {icon:aidIcon});
            case 'Crash Pickup Zone': return L.marker(latlng, {icon:crashIcon});
          }
        }
      }).bringToFront().addTo(map);



      // set variable for all trails
      allTrails = L.geoJson(myData,{
          onEachFeature: function (feature, layer) {
            layer.bindPopup((feature.properties.f2.bold()).toUpperCase() + "\n" + "<font color='#808080'><i> Skill Level:</i></font>"+ feature.properties.f3 + "<font color='#808080'><i>  Status:</i></font>" + feature.properties.f6, {
              maxWidth: "auto"
            });
            layer.on('mouseover', function (e) {
              this.openPopup()
            });
            layer.on('mouseout', function (e) {
              this.closePopup();
            });
            layer.on('click', function (e) {
              map.fitBounds(this.getBounds())
            });
          },
          style: function(feature) {
            if (feature.properties.f5 == 'open') {
              switch (feature.properties.f3) {
                case 'beginner': return {color: "#33a448", weight: 2, opacity: .6};
                case 'intermediate' : return {color: "#3356a4", weight: 2, opacity: .6};
                case 'advanced': return {color: "#030904", weight: 2, opacity: .6};
                case 'expert': return {color:"#a4338f", weight: 2, opacity: .6};
              }
            } else {
              return {color: "#BB061C", weight: 2};
            }
          }
      });

      allTrails.addTo(map)

          var liftIcon = L.icon({
      iconUrl:"https://image.flaticon.com/icons/png/512/2444/2444517.png",
      iconSize: [30,30]
      //- shadowSize: [35,35],
      //- shadowAnchor: [4,25],
      //- popupAnchor: [3,20]
    });

    //- L.marker([-79.98403072357178,38.41467750984024], {icon: liftIcon}).addTo(map);
    var liftStart = L.marker([38.41467750984024,-79.98403072357178], {icon: liftIcon});
    map.addLayer(liftStart);
    liftStart.bindPopup('Bike Lift Entrance');
    liftStart.on('mouseover', function (e) {
      this.openPopup()
    });
    liftStart.on('mouseout', function (e) {
    this.closePopup();
    });

    var liftTop = L.marker([38.411230799050685,-79.99435186386108], {icon: liftIcon});
    map.addLayer(liftTop);
    liftTop.bindPopup('Bike Lift Drop-Off');
    liftTop.on('mouseover', function (e) {
      this.openPopup()
    });
    liftTop.on('mouseout', function (e) {
      this.closePopup();
    });

