extends layout
block content
  ul
    li
        a(href='..') Home
      |   
    |   
    li.dropdown
      a.dropbtn(href='javascript:void(0)') Trails by Difficulty 
      |     
      .dropdown-content   
        div(name='difficulty', id="all", value='all' checked) All
        |      
        div(name='difficulty', id='beginner', value='beginner') Beginner
        | 
        div(name='difficulty', id='intermediate', value='intermediate') Intermediate 
        | 
        div(name='difficulty', id='advanced', value='advanced') Advanced 
        | 
        div(name='difficulty', id='expert', value='expert') Expert
    li.dropdown
      a.dropbtn(href='javascript:void(0)') Find Location
      |     
      .dropdown-content   
        div(name='location', id='location') Find My Location
        div(name='location', id='reset') Remove Location
    li.dropdown
      a.dropbtn(href='javascript:void(0)') Safety
      .dropdown-content
        div(class='open') View Safety Information
        div(class="popup-overlay")
          div(class="popup-content")
            h2 BIKE PARK SAFETY
            p IN CASE OF AN ACCIDENT CALL 304.572.5400 or alert any Snowshoe employee
            br
            p The Snowshoe Bike Park is intended for downhill mountain biking and consists of trails that contain naturally rugged terrain and man made and natural features. A downhill specific mountain bike is recommended when riding the Snowshoe Bike Park. All riders must possess a valid ticket or pass to enter the Bike Park. Before riding, always inspect your equipment or have it checked by a qualified mechanic.
            br
            ol 
              li Ride under control, within your ability, and in such a manner that you can stop or avoid other people and objects.
              li Keep off all closed trails and closed areas; stay on marked trails.
              li Read and obey all signs and warnings.
              li Inspect trails and features before using or attempting.
              li Do not stop where you obstruct a trail or are not visible from above or to other riders.
              li Stop and look both ways before crossing roads.
              li People ahead of you have the right of way. It is your responsibility to avoid them.
              li Helmets are required while riding on Snowshoe Mountain trails.
              li You should have sufficient physical dexterity, ability and knowledge to safely load, ride and unload the lift, and to ride the trails and features you choose.
              li Respect Snowshoe Mountain, its employees, other guests and property.
              br
              br
              br
              br
              br
              br
              br
              br
              br
            br
            br
            br
            br
            br
            button(class="closeSafety") Acknowledge and Close
  div#map
  script.
    window.onload = function() {
      if(!window.location.hash) {
        window.location = window.location + '#loaded';
        window.location.reload();
      }
    };
        //appends an "active" class to .popup and .popup-content when the "Open" button is clicked
    $(".open").on("click", function() {
      $(".popup-overlay, .popup-content").addClass("active");
    });

    //removes the "active" class to .popup and .popup-content when the "Close" button is clicked 
    $(".close, .popup-overlay").on("click", function() {
      $(".popup-overlay, .popup-content").removeClass("active");
    });

    var myData = !{JSON.stringify(jsonData)};
    var featData = !{JSON.stringify(featData)};
    var emergData = !{JSON.stringify(emergData)};
    // Create variable to hold map element, give initial settings to map
      var map = L.map('map',{ center: [38.41514, -79.98964], zoom: 15});
      // Add OpenStreetMap tile layer to map element
      L.tileLayer('https://api.mapbox.com/styles/v1/rlaird2/ckrpnffat2ttc17rsnys15gnb/tiles/256/{z}/{x}/{y}@2x?access_token=pk.eyJ1IjoicmxhaXJkMiIsImEiOiJja2JmN2x6aWIwc3VmMzVvNDl5Mzk1ejNuIn0.rrNaMaCy39_ntp7qPvp0dQ', {
        attribution: 'Map data &copy; <a href=&quot;https://www.openstreetmap.org/&quot;>OpenStreetMap</a> contributors, <a href=&quot;https://creativecommons.org/licenses/by-sa/2.0/&quot;>CC-BY-SA</a>, Imagery &copy; <a href=&quot;https://www.mapbox.com/&quot;>Mapbox</a> <div>Icons made by <a href="" title="ultimatearm">ultimatearm</a> from <a href="https://www.flaticon.com/" title="Flaticon">www.flaticon.com</a></div>'
      }).addTo(map);

      //- geojson for lift
      var lift = {
      "type": "FeatureCollection",
      "features": [
        {
          "type": "Feature",
          "properties": {
            "name": "Ballhooter Bike Lift"
          },
          "geometry": {
            "type": "LineString",
            "coordinates": [
              [
                -79.98392343521118,
                38.41474476109837
              ],
              [
                -79.99456644058228,
                38.411230799050685
              ]
            ]
          }
        }
      ]
    }
    //- adding lift to the map and styling
      L.geoJson(lift,{
        onEachFeature: function (feature, layer) {
          layer.bindPopup(feature.properties.name)
          layer.on('mouseover', function (e) {
            this.openPopup()
          });
          layer.on('mouseout', function (e) {
            this.closePopup();
          });
          layer.on('click', function (e) {
            this.fitBounds(this.getBounds())
          });
        },
        style: function(feature) {
          switch (feature.properties.name) {
            case 'Ballhooter Bike Lift': return {color: "#bbbdbf", weight: 7};
          }
        }
      }).bringToBack().addTo(map);


      //icons for features
      var jumpIcon = L.icon ({
        iconUrl: 'https://image.flaticon.com/icons/png/512/2618/2618845.png',
        iconSize: [45,45]
      });
      var woodIcon = L.icon ({
        iconUrl: 'https://image.flaticon.com/icons/png/512/2948/2948264.png',
        iconSize: [25,25]
      });
      var repairIcon = L.icon ({
        iconUrl: 'https://image.flaticon.com/icons/png/512/5265/5265429.png',
        iconSize: [35,35]
      });
      var washIcon = L.icon ({
        iconUrl: 'https://image.flaticon.com/icons/png/512/2709/2709415.png',
        iconSize: [35,35]
      });

      // adding feature geojson from features table
      L.geoJson(featData,{
          onEachFeature: function (feature, layer) {
          layer.bindPopup(feature.properties.f1)
          layer.on('mouseover', function (e) {
            this.openPopup()
          });
          layer.on('mouseout', function (e) {
            this.closePopup();
          });
          layer.on('click', function (e) {
            var latLngs = [this.getLatLng()];
            var markerBounds = L.latLngBounds(latLngs);
            map.fitBounds(markerBounds);
          });
        },
        pointToLayer: function (feature, latlng) {
          console.log(feature.geometry.coordinates)
          switch (feature.properties.f2) {
            case 'Jump': return L.marker(latlng, {icon:jumpIcon});
            case 'Wood Ramp': return L.marker(latlng, {icon:woodIcon});
            case 'Bike Repair': return L.marker(latlng, {icon:repairIcon});
            case 'Bike Wash': return L.marker(latlng, {icon:washIcon});
          }
        }
      }).bringToFront().addTo(map);


      //icons for emergency 
      var aidIcon = L.icon ({
        iconUrl: 'https://image.flaticon.com/icons/png/512/5335/5335736.png',
        iconSize: [35,35]
      });
      var crashIcon = L.icon ({
        iconUrl: 'https://image.flaticon.com/icons/png/512/2996/2996353.png',
        iconSize: [35,35]
      });
      //- adding features from emergency table
      L.geoJson(emergData,{
          onEachFeature: function (feature, layer) {
          layer.bindPopup(feature.properties.f1 +  "<br>" + "For accidents - call 304-572-5400")
          layer.on('mouseover', function (e) {
            this.openPopup()
          });
          layer.on('mouseout', function (e) {
            this.closePopup();
          });
          layer.on('click', function (e) {
            var latLngs = [this.getLatLng()];
            var markerBounds = L.latLngBounds(latLngs);
            map.fitBounds(markerBounds);
          });
        },
        pointToLayer: function(feature, latlng) {
          console.log(feature.geometry.coordinates)
          switch (feature.properties.f1) {
            case 'First Aid Station': return L.marker(latlng, {icon:aidIcon});
            case 'Crash Pickup Zone': return L.marker(latlng, {icon:crashIcon});
          }
        }
      }).bringToFront().addTo(map);

      allTrails = L.geoJson(myData,{
          onEachFeature: function (feature, layer) {
            layer.bindPopup((feature.properties.f2.bold()).toUpperCase() + "\n" + "<font color='#808080'><i> Skill Level:</i></font>"+ feature.properties.f3 + "<font color='#808080'><i>  Status:</i></font>" + feature.properties.f6, {
              maxWidth: "auto"
            });
            layer.on('mouseover', function (e) {
              this.openPopup()
            });
            layer.on('mouseout', function (e) {
              this.closePopup();
            });
            layer.on('click', function (e) {
              map.fitBounds(this.getBounds())
            });
          },
          style: function(feature) {
            if (feature.properties.f5 == 'open') {
              switch (feature.properties.f3) {
                case 'beginner': return {color: "#33a448", weight: 2, opacity: .6};
                case 'intermediate' : return {color: "#3356a4", weight: 2, opacity: .6};
                case 'advanced': return {color: "#030904", weight: 2, opacity: .6};
                case 'expert': return {color:"#a4338f", weight: 2, opacity: .6};
              }
            } else {
              return {color: "#BB061C", weight: 2};
            }
          }
      });
    //-query dropdown and add all trails to map on All 
    let allTrailsDrop = document.querySelector('#all');
    allTrailsDrop.addEventListener('click',()=>{
      map.removeLayer(beginnerTrails)
      map.removeLayer(intermediateTrails)
      map.removeLayer(advancedTrails)
      map.removeLayer(expertTrails)
      allTrails.addTo(map)
    });

    //- on page load - load all trails
    allTrails.addTo(map)

      //- variable to filter beginner trails for dropdown
      var beginnerTrails = L.geoJson(myData, {
        filter: function(feature, layer) {
          return feature.properties.f3 == 'beginner';
        },
        onEachFeature: function (feature, layer) {
          layer.bindPopup(feature.properties.f2)
          layer.on('mouseover', function (e) {
            this.openPopup()
          });
          layer.on('mouseout', function (e) {
            this.closePopup();
          });
          layer.on('click', function (e) {
            map.fitBounds(this.getBounds())
          });
          },
        style: function (feature) {
          if (feature.properties.f5 == 'open') {
            switch (feature.properties.f3) {
              case 'beginner': return {color: "#33a448", weight: 3};
            }
          } else {
            return {color: "#BB061C", weight: 2};
          }
        }
      });
    //-query dropdown and add beginners trails
    let begTrailsDrop = document.querySelector('#beginner');
    begTrailsDrop.addEventListener('click',()=>{
      map.removeLayer(allTrails)
      map.removeLayer(intermediateTrails)
      map.removeLayer(advancedTrails)
      map.removeLayer(expertTrails)
      beginnerTrails.addTo(map)
    });

      //- variable to filter intermediate trails for dropdown
      var intermediateTrails = L.geoJson(myData, {
        filter: function(feature, layer) {
          return feature.properties.f3 == 'intermediate';
        },
        onEachFeature: function (feature, layer) {
          layer.bindPopup(feature.properties.f2)
          layer.on('mouseover', function (e) {
            this.openPopup()
          });
          layer.on('mouseout', function (e) {
            this.closePopup();
          });
          layer.on('click', function (e) {
            map.fitBounds(this.getBounds())
          });
          },
        style: function (feature) {
          if (feature.properties.f5 == 'open') {
            switch (feature.properties.f3) {
              case 'intermediate': return {color: "#3356a4", weight: 3};
            }
          } else {
            return {color: "#BB061C", weight: 2};
          }
        }
      });
    //-query dropdown and add beginners trails
    let interTrailsDrop = document.querySelector('#intermediate');
    interTrailsDrop.addEventListener('click',()=>{
      map.removeLayer(allTrails)
      map.removeLayer(beginnerTrails)
      map.removeLayer(advancedTrails)
      map.removeLayer(expertTrails)
      intermediateTrails.addTo(map)
    });

      //- variable to filter Advanced trails for dropdown
      var advancedTrails = L.geoJson(myData, {
        filter: function(feature, layer) {
          return feature.properties.f3 == 'advanced';
        },
        onEachFeature: function (feature, layer) {
          layer.bindPopup(feature.properties.f2)
          layer.on('mouseover', function (e) {
            this.openPopup()
          });
          layer.on('mouseout', function (e) {
            this.closePopup();
          });
          layer.on('click', function (e) {
            map.fitBounds(this.getBounds())
          });
          },
        style: function (feature) {
          if (feature.properties.f5 == 'open') {
            switch (feature.properties.f3) {
              case 'advanced': return {color: "#030904", weight: 3};
            }
          } else  {
            return {color: "#BB061C", weight: 2};
          }
        }
      });
    //-query dropdown and add beginners trails
    let advTrailsDrop = document.querySelector('#advanced');
    advTrailsDrop.addEventListener('click',()=>{
      map.removeLayer(allTrails)
      map.removeLayer(beginnerTrails)
      map.removeLayer(intermediateTrails)
      map.removeLayer(expertTrails)
      advancedTrails.addTo(map)
    });

          //- variable to filter Advanced trails for dropdown
      var expertTrails = L.geoJson(myData, {
        filter: function(feature, layer) {
          return feature.properties.f3 == 'expert';
        },
        onEachFeature: function (feature, layer) {
          layer.bindPopup(feature.properties.f2)
          layer.on('mouseover', function (e) {
            this.openPopup()
          });
          layer.on('mouseout', function (e) {
            this.closePopup();
          });
          layer.on('click', function (e) {
            map.fitBounds(this.getBounds())
          });
          },
        style: function (feature) {
          if (feature.properties.f5 == 'open') {
            switch (feature.properties.f3) {
              case 'expert': return {color: "#a4338f", weight: 3};
            }
          } else {
            return {color: "#BB061C", weight: 2};
          }
        }
      });
    //-query dropdown and add beginners trails
    let expTrailsDrop = document.querySelector('#expert');
    expTrailsDrop.addEventListener('click',()=>{
      map.removeLayer(allTrails)
      map.removeLayer(beginnerTrails)
      map.removeLayer(intermediateTrails)
      map.removeLayer(advancedTrails)
      expertTrails.addTo(map)
    });
    
    var locationMarker
    var locationCircle
    //- find user location
    function onLocationFound(e) {
      var radius = e.accuracy;

      locationMarker = new L.marker(e.latlng)
      map.addLayer(locationMarker)
      locationMarker.bindPopup("You are within " + radius + " meters from this point").openPopup();

      locationCircle = new L.circle(e.latlng, radius);
      map.addLayer(locationCircle)
    }

    map.on('locationfound', onLocationFound);

    function onLocationError(e) {
      alert(e.message);
    }


    //- on dropdown selection find location
    let locationDrop = document.querySelector('#location')
    locationDrop.addEventListener('click', ()=>{
      map.on('locationerror', onLocationError);
      map.locate({setView: true, maxZoom: 16});
    });

    let resetDrop = document.querySelector('#reset')
    resetDrop.addEventListener('click', ()=>{
      map.setView([38.41514, -79.98964])
      map.removeLayer(locationMarker)
      map.removeLayer(locationCircle)
    })

    /**************************************ADD Legend to Map****************************************/
    var legend = L.control({ position: "bottomright" });

    legend.onAdd = function(map) {
      var div = L.DomUtil.create("div", "legend");
      //- div.innerHTML += '<right style="font-size:30px;cursor:pointer" onclick="closeNav()">&#9776;</right><br>'
      //- div.innerHTML += '<img src="https://image.flaticon.com/icons/png/512/5335/5335736.png" height="30" width="30"> <span>First Aid</span> <br>'
      div.innerHTML += '<i style="background: #bbbdbf"></i><span>Bike Lift</span><br>';
      div.innerHTML += "<h4>Trails</h4>";
      div.innerHTML += '<i style="background: #BB061C"></i><span>Closed</span><br>';
      div.innerHTML += '<i style="background: #1ae582"></i><span>Beginner</span><br>';
      div.innerHTML += '<i style="background: #2441db"></i><span>Intermediate</span><br>';
      div.innerHTML += '<i style="background: #2b0600"></i><span>Advanced</span><br>';
      div.innerHTML += '<i style="background: #670068"></i><span>Expert</span><br>';      
      return div;
    };

    legend.addTo(map);

    function closeNav() {
      document.getElementsByClassName(".legend").style.width = "0";
    }
    //- add lift icons along lift path
    var liftIcon = L.icon({
      iconUrl:"https://image.flaticon.com/icons/png/512/2444/2444517.png",
      iconSize: [30,30]
      //- shadowSize: [35,35],
      //- shadowAnchor: [4,25],
      //- popupAnchor: [3,20]
    });

    //- L.marker([-79.98403072357178,38.41467750984024], {icon: liftIcon}).addTo(map);
    var liftStart = L.marker([38.41467750984024,-79.98403072357178], {icon: liftIcon});
    map.addLayer(liftStart);
    liftStart.bindPopup('Bike Lift Entrance');
    liftStart.on('mouseover', function (e) {
      this.openPopup()
    });
    liftStart.on('mouseout', function (e) {
    this.closePopup();
    });

    var liftTop = L.marker([38.411230799050685,-79.99435186386108], {icon: liftIcon});
    map.addLayer(liftTop);
    liftTop.bindPopup('Bike Lift Drop-Off');
    liftTop.on('mouseover', function (e) {
      this.openPopup()
    });
    liftTop.on('mouseout', function (e) {
      this.closePopup();
    });
    

    //- layer.on('mouseover', function (e) {
    //-   this.openPopup()
    //- });
    //- layer.on('mouseout', function (e) {
    //-   this.closePopup();
    //- });
    //- layer.on('click', function (e) {
    //-   var latLngs = [this.getLatLng()];
    //-   var markerBounds = L.latLngBounds(latLngs);
    //-   map.fitBounds(markerBounds);
    //- });

    //- L.marker([38.41467750984024,-79.98403072357178], {icon: liftIcon}).addTo(map);
    //- L.marker([-79.98579025268555,38.41412268457233], {icon: liftIcon}).addTo(map);
    //- L.marker([38.41412268457233,-79.98579025268555], {icon: liftIcon}).addTo(map);
    //- L.marker([-79.98795747756957,38.413450163384084], {icon: liftIcon}).addTo(map);
    //- L.marker([-79.9901032447815,38.41272719612521], {icon: liftIcon}).addTo(map);
    //- L.marker([-79.99244213104248,38.41190334089571], {icon: liftIcon}).addTo(map);
    //- L.marker([-79.99435186386108,38.411230799050685], {icon: liftIcon}).addTo(map);
    //- L.marker([38.411230799050685,-79.99435186386108], {icon: liftIcon}).addTo(map);

    





    //- function showLegend(layer) {
    //- var item = ".legend > span:contains(" + layer + ")";
    //- $(item).show();
    //- }

    //- function hideLegend(layer) {
    //-     var item = ".legend > span:contains(" + layer + ")";
    //-     $(item).hide();
    //- }

    //- map.on('overlayadd', function (eventLayer) {
    //-     showLegend(eventLayer.name);
    //- });

    //- map.on('overlayremove', function (eventLayer) {
    //-     hideLegend(eventLayer.name);
    //- });


    //- $.each(control.getOverlays(), function (index, value) {
    //-     if (!value) {
    //-         hideLegend(index);
    //-     }
    //- });